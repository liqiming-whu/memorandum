" vim plug插件管理
call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'Yggdroot/indentLine'
let g:indentLine_noConcealCursor = 1
let g:indentLine_color_term = 0
let g:indentLine_char = '|'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar' "需要安装ctags
let g:tagbar_width=35
let g:tagbar_autofocus=1
let g:tagbar_left = 1
nmap <F3> :TagbarToggle<CR>
Plug 'justinmk/vim-syntax-extra'
Plug 'hdima/python-syntax'
let python_highlight_all = 1
Plug 'Raimondi/delimitMate'
au FileType python let b:delimitMate_nesting_quotes = ['"']
Plug 'w0rp/ale'
call plug#end()

" 首先设置 mapleader，后面键盘映射随时要用
" 基本上所有自定义的快捷键都以这个字符打头，比如映射`,w`为`:w`
let mapleader = ","
let g:mapleader = ","

" 不兼容 Vi，最大限度使用新特性
set nocompatible

" 写入文件时，不做备份
set nobackup
set nowritebackup

" 不用交换文件
set noswapfile

" 保存文件的快捷键
nmap <leader>w :w!<CR>
nmap <leader>q :q!<CR>



" 移除 Windows 文件结尾的 `^M`
noremap <leader>m :%s/<C-V><C-M>//ge<CR>

" 重新打开文件时，恢复上一次游标位置
" 通过View可以记住很多设置，比如高亮当前行、折行等等，但是往往比较让人费解
set viewoptions=cursor  " 只记住游标
au BufWinLeave ?* mkview
au VimEnter ?* silent loadview

" 检测文件编码时，优先考虑 UTF-8
set fileencodings=utf-8,ucs-bom,gbk,gb2312,big5,latin1

" 不同平台，设置不同的行尾符，即 EOL
" 注意：在 Mac 平台，也是 unix 优先；自 OS X 始，行尾符与 Unix 一致，
"      都是 `\n` 而不是 `\r`
if has("win32")
    set fileformats=dos,unix,mac
else
    set fileformats=unix,mac,dos
endif

" 在断行、合并(join)行时，针对多字节字符（比如中文）的优化处理
set formatoptions+=mM

" 采用 C 风格的缩进，适用于大多数语言
" 细节调整见下面的 `cinoptions`
" 你也可以尝试 smartindent 和 autoindent
set cindent

" 细节调整，主要为了适应 Google C++ Style
" t0: 函数返回类型声明不缩进
" g0: C++ "public:" 等声明缩进一个字符
" h1: C++ "public:" 等声明后面的语句缩进一个字符
" N-s: C++ namespace 里不缩进
" j1: 合理的缩进 Java 或 C++ 的匿名函数，应该也适用于 JS
set cinoptions=t0,g1,h1,N-s,j1

" 让制表符智能一些
set smarttab
" 先设置缺省情况，然后根据不同文件类型再次重新设置
set expandtab | set tabstop=4 | set shiftwidth=4  " Python, CSS, etc.

" 对 C/C++ 等，制表符和缩进都是两个空格
au FileType c,cpp,html,htmldjango,lua,javascript,nsis
    \ set expandtab | set tabstop=2 | set shiftwidth=2

" Makefile 必须保留制表符，且习惯上占八个空格
au FileType make set noexpandtab | set tabstop=8 | set shiftwidth=8

" 对 C/C++/Python/Vim 80列限制
au FileType c,cpp,python,vim set textwidth=80
" 设定了宽度限制，画一条竖线以警示
set colorcolumn=81

" 通常代码不需折行，前面有些语言设置了宽度限制就更不需要了。
" 实际操作下来，纯文本、Markdown、XML 等比较需要折行，因为它们常常一行太长了
au FileType text,markdown,html,xml set wrap

" 折行时，以单词为界，以免切断单词
set linebreak
" 折行后的后续行，使用与第一行相同的缩进
set breakindent

" 即使在终端，也尽量启用鼠标
if has("mouse") | set mouse=a | endif

" 显示输入中的命令，对 gqq/gcc 这种多个字符的命令特别有用
set showcmd
" 下面几个不解释，自行查看帮助
set scrolloff=7
set wildmenu
set wildmode="list:longest"
set ruler
" 命令行高度为两行
set cmdheight=2

" 永远显示行号
" 另有比较酷的相对行号（`relativenumber`）
set number
" 为方便复制，用<F6>开启/关闭行号显示:  
nnoremap <F6> :set nonumber!<CR>:set foldcolumn=0<CR> 
set lazyredraw
" 切换缓存时不用保存
set hidden
" 输入模式下，退格键可以退一切字符
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" 高亮不想要的空格，比如行尾
" See [http://vim.wikia.com/wiki/Highlight_unwanted_spaces]
" - highlight trailing whitespace in red
" - have this highlighting not appear whilst you are typing in insert mode
" - have the highlighting of whitespace apply when you open new buffers
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches() " for performance

" 搜索时忽略大小写（incsearch)，如果搜索模式里有大写字母，就不再忽略大小写（smartcase）
set ignorecase
set smartcase
" 即时显示匹配结果（incsearch），并高亮所有结果（hlsearch）
set incsearch
set hlsearch
map <silent> <leader><CR> :nohlsearch<CR>

" 替换时，缺省启用g标志，即，同一行里的所有匹配都会被替换
set gdefault
